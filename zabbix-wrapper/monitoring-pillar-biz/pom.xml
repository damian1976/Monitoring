<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>it.reply</groupId>
		<artifactId>monitoring-pillar</artifactId>
		<version>1.9.0-SNAPSHOT</version>
	</parent>

	<artifactId>monitoring-pillar-biz</artifactId>
	<packaging>ejb</packaging>

	<name>Monitoring Pillar - Business Layer module</name>

	<dependencies>
		<!-- TODO remove after completed the module structure and tested ! -->

		<!-- JBoss provided Java EE 6.0 API -->
		<dependency>
			<groupId>org.jboss.spec</groupId>
			<artifactId>jboss-javaee-6.0</artifactId>
			<version>3.0.2.Final</version>
			<type>pom</type>
			<scope>provided</scope>
		</dependency>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss AS 7 -->
		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JSF API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional 
			(JTA) JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Arquillian Suite Extension - to run testsuites instead of single test -->
		<!-- Currently not working due to ShrinkWrap Maven Resolver throwing exception 
			for org.codehaus.plexus.configuration.PlexusConfiguration.setName not found -->
		<!-- <dependency> -->
		<!-- <groupId>org.eu.ingwar.tools</groupId> -->
		<!-- <artifactId>arquillian-suite-extension</artifactId> -->
		<!-- <version>1.1.1</version> -->
		<!-- <scope>test</scope> -->
		<!-- </dependency> -->

		<!-- ShrinkWrap Maven Resolver for Arquillian Tests -->
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-impl-maven</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>com.google.collections</groupId>
					<artifactId>google-collections</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- Google Guava Libs -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>

		<dependency>
			<groupId>org.javatuples</groupId>
			<artifactId>javatuples</artifactId>
		</dependency>

		<!-- Logging (slf4j with log4j2) -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<!-- Binding for Log4J -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
		</dependency>
		<!-- Log4J 2 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<!-- Log4J Legacy -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
		</dependency>

		<!-- Fix to avoid export of the library (which conflicts with the one on 
			JBoss AS 7.1.1.Final) -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- JBoss Weld -->
		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.weld</groupId>
			<artifactId>weld-core-impl</artifactId>
		</dependency>

		<!-- Commons -->

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
		</dependency>

		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>

		<!-- Reply dependencies -->
		<dependency>
			<groupId>it.reply</groupId>
			<artifactId>reply-commons</artifactId>
		</dependency>

		<!-- Monitoring Pillar dependencies -->
		<dependency>
			<groupId>it.reply</groupId>
			<artifactId>monitoring-pillar-domain</artifactId>
		</dependency>
	</dependencies>

	<profiles>

		<!-- This profile enables the build with the automatic injection of environment-dependent 
			configuration file. Note that the artifact will be named with a suffix that 
			is the environment name -->
		<profile>
			<id>build-environment-dependent</id>

			<build>
				<plugins>

					<!-- Extract resources from the environments-config archive -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-app-config</id>
								<!-- This is invoked *ONLY* in the clean phase !! You should run 
									Maven with clean between the goals to update the settings from the archive. -->
								<phase>clean</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>${environment.groupId}</groupId>
											<artifactId>monitoring-pillar-environments-config</artifactId>
											<version>${project.version}</version>
											<type>jar</type>
											<overWrite>true</overWrite>
											<outputDirectory>${project.build.directory}/alternate-resources</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy resources based on the environment in this project's resource 
						folder. NOTE: every file located in 'monitoring-pillar/var-configs-profiles/${environment.name}/resources' 
						subfolder of the environments-config archive will be copied -->
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>filter-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<!-- outputDirectory is 'target/classes' because this is a JAR project 
										! -->
									<outputDirectory>target/classes</outputDirectory>
									<overwrite>true</overwrite>
									<resources>
										<resource>
											<directory>target/alternate-resources/monitoring-pillar/var-configs-profiles/${environment.name}/resources</directory>
											<filtering>false</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>

				<filters>
					<!-- Automatically load all of the property keys and values from the 
						'${environment.name}.properties' property file, located in 'monitoring-pillar/var-configs-profiles/${environment.name}/${environment.name}.properties' 
						file of the environments-config archive -->
					<filter>						
			${project.build.directory}/alternate-resources/monitoring-pillar/var-configs-profiles/${environment.name}/${environment.name}.properties
        	</filter>
				</filters>
			</build>
		</profile>


		<!-- Arquillian test profile managed by JBoss AS 7 -->
		<!-- <profile> -->
		<!-- <id>arquillian-jbossas-managed</id> -->
		<!-- <dependencies> -->
		<!-- <dependency> -->
		<!-- <groupId>org.jboss.as</groupId> -->
		<!-- <artifactId>jboss-as-arquillian-container-managed</artifactId> -->
		<!-- <scope>test</scope> -->
		<!-- <exclusions> -->
		<!-- <exclusion> -->
		<!-- <artifactId>google-collections</artifactId> -->
		<!-- <groupId>com.google.collections</groupId> -->
		<!-- </exclusion> -->
		<!-- </exclusions> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.jboss.arquillian.protocol</groupId> -->
		<!-- <artifactId>arquillian-protocol-servlet</artifactId> -->
		<!-- <scope>test</scope> -->
		<!-- </dependency> -->
		<!-- </dependencies> -->
		<!-- </profile> -->

		<!-- Arquillian remote container on JBoss -->

		<!-- <profile> -->
		<!-- <id>arquillian-jbossas-remote</id> -->
		<!-- <dependencies> -->
		<!-- <dependency> -->
		<!-- <groupId>org.jboss.as</groupId> -->
		<!-- <artifactId>jboss-as-arquillian-container-remote</artifactId> -->
		<!-- <scope>test</scope> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.jboss.arquillian.protocol</groupId> -->
		<!-- <artifactId>arquillian-protocol-servlet</artifactId> -->
		<!-- <scope>test</scope> -->
		<!-- </dependency> -->
		<!-- </dependencies> -->
		<!-- </profile> -->


		<profile>
			<id>arquillian-jbossas-embedded</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.jboss.spec</groupId>
					<artifactId>jboss-javaee-6.0</artifactId>
					<version>1.0.0.Final</version>
					<type>pom</type>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.arquillian.container</groupId>
					<artifactId>arquillian-weld-ee-embedded-1.1</artifactId>
					<version>1.0.0.CR7</version>
				</dependency>
				<dependency>
					<groupId>org.jboss.weld</groupId>
					<artifactId>weld-core</artifactId>
					<version>2.1.0.Final</version>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-simple</artifactId>
					<version>1.6.4</version>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>arquillian-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.spec</groupId>
					<artifactId>jboss-javaee-6.0</artifactId>
					<version>1.0.0.Final</version>
					<type>pom</type>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<version>7.1.1.Final</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.jboss.arquillian.protocol</groupId>
					<artifactId>arquillian-protocol-servlet</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

	</profiles>

	<build>
		<!-- ${environment.name} suffix is to make visible that the archive contains 
			injected configurations environment-dependent -->
		<finalName>${project.artifactId}${finalname.suffix}${environment.name}</finalName>

		<plugins>
			<plugin>
				<artifactId>maven-ejb-plugin</artifactId>
				<configuration>
					<ejbVersion>${version.ejb}</ejbVersion>
				</configuration>
			</plugin>

			<!-- PLUGIN USEFUL FOR ARQUILLIAN -->
			<!-- <plugin> -->
			<!-- <artifactId>maven-surefire-plugin</artifactId> -->
			<!-- <version>2.17</version> -->
			<!-- </plugin> -->

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.17</version>
				<configuration>
					<systemPropertyVariables>
						<JBOSS_HOME>${env.JBOSS_HOME}</JBOSS_HOME>
					</systemPropertyVariables>
					<skip>false</skip>
				</configuration>
			</plugin>


		</plugins>

		<resources>
			<!-- Filter .properties and replace placeholders -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.yml</include>
				</includes>
			</resource>
			<!-- Also include other resources, not being .properties, without filtering -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
					<exclude>**/*.yml</exclude>
				</excludes>
			</resource>
		</resources>
	</build>

</project>